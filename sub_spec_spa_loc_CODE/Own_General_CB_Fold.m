clear all; close all; clc;
%ref channel [] = all channels
% chn = {[]};
%type 6+all
% chn={[];[10:12 18:20 26:28]; [5:7 12:14 20:22]; [14:16 22:24 30:32]; [20:22 28:30 37:39]; [30:32 39:41 46:48]; [37:39 44:46 51:53]; [26:28 35:37 42:44]};
%type 14
%chn ={[]; [1 2 5 6 7 12 13 14 21];[3 4 5 10 11 12 18 19 20];[5 6 7 12 13 14 20 21 22];[7 8 9 14 15 16 22 23 24];[10 11 12 18 19 20 26 27 28];[12 13 14 20 21 22 28 29 30];[14 15 16 22 23 24 30 31 32];[18 19 20 26 27 28 35 36 37];[20 21 22 28 29 30 37 38 39];[22 23 24 30 31 32 39 40 41];[26 27 28 35 36 37 42 43 44];[28 29 30 37 38 39 44 45 46];[30 31 32 39 40 41 46 47 48];[35 36 37 42 43 44 49 50 51];[37 38 39 44 45 46 51 52 53];[39 40 41 46 47 48 53 54 55];[50 51 52 53 54 56 57 58 59];[17 18 19 25 26 27 34 35 36];[22 23 24 31 32 33 39 40 41]};
%type 19
 %chn = {[17:24];[25:33];[34:41];[1:16 18:23 28:30];[36:39 42:47 49:59];[10 11 17:19 26 27];[11 12 18:20 27 28 26]};
%type 19 + all chn
% chn = {[];[17:24];[25:33];[34:41];[1:16 18:23 28:30];[36:39 42:47 49:59];[10 11 17:19 26 27];[11 12 18:20 27 28 26]};
%type 20
%chn = {[1:16 18:22 29];[25:33];[36:39 42:47 49:57];[10 11 17:19 25:28 34:36 42 43];[11:13 18:21 26:29 35:38 43:45];[12:14 19:22 27:30 36:39 44:46];[13:15 20:23 29:32 37:40 45:47];[15 16 22:24 30:33 39:41 47:48];[3:57]};
%type 20+all
% chn = {[];[1:16 18:22 29];[25:33];[36:39 42:47 49:57];[10 11 17:19 25:28 34:36 42 43];[11:13 18:21 26:29 35:38 43:45];[12:14 19:22 27:30 36:39 44:46];[13:15 20:23 29:32 37:40 45:47];[15 16 22:24 30:33 39:41 47:48];[1:57]};
%type 20 without line
%chn = {[1:16 18:22 29];[36:39 42:47 49:57];[10 11 17:19 25:28 34:36 42 43];[11:13 18:21 26:29 35:38 43:45];[12:14 19:22 27:30 36:39 44:46];[13:15 20:23 29:32 37:40 45:47];[15 16 22:24 30:33 39:41 47:48];[1:57]};
%type 21
%chn = {[1:16 18:23 28:30];[36:39 42:59];[10 11 17:19 26 27];[11 12 18:20 27 28 36];[12 13 19:21 28 29 37];[13 14 20:22 29 30 38];[14 15 21:23 30 31 39];[15 16 22:24 31 32 40];[17 18 25:27 34 35];[18 19 26:28 35 36];[19 20 27:29 36 37];[20 21 28:30 37 38];[21 22 29:31 38 39];[22 23 30:32 39 40];[23 24 31:33 40 41];[26 27 34:36 42 43];[27 28 35:37 43 44];[28 29 36:38 44 45];[29 30 37:39 45 46];[30 31 38:40 46 47];[31 32 39:41 47 48]};
%type 21+all
% chn = {[];[1:16 18:23 28:30];[36:39 42:59];[10 11 17:19 26 27];[11 12 18:20 27 28 36];[12 13 19:21 28 29 37];[13 14 20:22 29 30 38];[14 15 21:23 30 31 39];[15 16 22:24 31 32 40];[17 18 25:27 34 35];[18 19 26:28 35 36];[19 20 27:29 36 37];[20 21 28:30 37 38];[21 22 29:31 38 39];[22 23 30:32 39 40];[23 24 31:33 40 41];[26 27 34:36 42 43];[27 28 35:37 43 44];[28 29 36:38 44 45];[29 30 37:39 45 46];[30 31 38:40 46 47];[31 32 39:41 47 48]};
%type 22
%chn = {[1:16 18:23 28:30];[36:39 42:59];[17 18 25:27 34 35];[18 19 26:28 35 36];[19 20 27:29 36 37];[20 21 28:30 37 38];[21 22 29:31 38 39];[22 23 30:32 39 40];[23 24 31:33 40 41]};
%type 22 +all
% chn = {[];[1:16 18:23 28:30];[36:39 42:59];[17 18 25:27 34 35];[18 19 26:28 35 36];[19 20 27:29 36 37];[20 21 28:30 37 38];[21 22 29:31 38 39];[22 23 30:32 39 40];[23 24 31:33 40 41]};
%type 23
% chn={[10:16];[25:33];[42:48];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55]};
%type 23+all
%chn={[];[10:16];[25:33];[42:48];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55]};
%type 24
%chn={[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55]}
% type 24+all
% chn={[];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55]};
%type 25 
% chn = {[1:16 18:23 28:30];[36:39 42:59];[10:48]};
% type 25 +all
 %chn = {[];[1:16 18:23 28:30];[36:39 42:59];[10:48]};
%type 25+type 6
%chn={[];[1:16 18:23 28:30];[36:39 42:59];[10:48];[10:12 18:20 26:28]; [5:7 12:14 20:22]; [14:16 22:24 30:32]; [20:22 28:30 37:39]; [30:32 39:41 46:48]; [37:39 44:46 51:53]; [26:28 35:37 42:44]};
%type 25+type 14
 %chn ={[];[1:16 18:23 28:30];[36:39 42:59];[10:48]; [1 2 5 6 7 12 13 14 21];[3 4 5 10 11 12 18 19 20];[5 6 7 12 13 14 20 21 22];[7 8 9 14 15 16 22 23 24];[10 11 12 18 19 20 26 27 28];[12 13 14 20 21 22 28 29 30];[14 15 16 22 23 24 30 31 32];[18 19 20 26 27 28 35 36 37];[20 21 22 28 29 30 37 38 39];[22 23 24 30 31 32 39 40 41];[26 27 28 35 36 37 42 43 44];[28 29 30 37 38 39 44 45 46];[30 31 32 39 40 41 46 47 48];[35 36 37 42 43 44 49 50 51];[37 38 39 44 45 46 51 52 53];[39 40 41 46 47 48 53 54 55];[50 51 52 53 54 56 57 58 59];[17 18 19 25 26 27 34 35 36];[22 23 24 31 32 33 39 40 41]};
%type 25+ type 21
 %chn = {[];[1:16 18:23 28:30];[36:39 42:59];[10:48];[1:16 18:23 28:30];[36:39 42:59];[10 11 17:19 26 27];[11 12 18:20 27 28 36];[12 13 19:21 28 29 37];[13 14 20:22 29 30 38];[14 15 21:23 30 31 39];[15 16 22:24 31 32 40];[17 18 25:27 34 35];[18 19 26:28 35 36];[19 20 27:29 36 37];[20 21 28:30 37 38];[21 22 29:31 38 39];[22 23 30:32 39 40];[23 24 31:33 40 41];[26 27 34:36 42 43];[27 28 35:37 43 44];[28 29 36:38 44 45];[29 30 37:39 45 46];[30 31 38:40 46 47];[31 32 39:41 47 48]};
%type 25+type 24
 %chn={[];[1:16 18:23 28:30];[36:39 42:59];[10:48];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55]};
%type 26
% chn = {[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[25:33];[42:48]};
%type 25+type 26
% chn = {[];[1:16 18:23 28:30];[36:39 42:59];[10:48];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[25:33];[42:48]};
%type 27
%chn = {[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 50];[2 7 14 22 30 39 46 54]};
%type 27 - h lines (vertical)
% chn = {[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 49];[2 7 14 22 30 39 47 55]};
%type 27+Type 6
% chn = {[10:12 18:20 26:28]; [5:7 12:14 20:22]; [14:16 22:24 30:32]; [20:22 28:30 37:39]; [30:32 39:41 46:48]; [37:39 44:46 51:53]; [26:28 35:37 42:44];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 49];[2 7 14 22 30 39 47 55]};
%type 27+ Type 14
% chn = {[1 2 5 6 7 12 13 14 21];[3 4 5 10 11 12 18 19 20];[5 6 7 12 13 14 20 21 22];[7 8 9 14 15 16 22 23 24;10 11 12 18 19 20 26 27 28];[12 13 14 20 21 22 28 29 30];[14 15 16 22 23 24 30 31 32];[18 19 20 26 27 28 35 36 37];[20 21 22 28 29 30 37 38 39];[22 23 24 30 31 32 39 40 41];[26 27 28 35 36 37 42 43 44];[28 29 30 37 38 39 44 45 46];[30 31 32 39 40 41 46 47 48];[35 36 37 42 43 44 49 50 51];[37 38 39 44 45 46 51 52 53];[39 40 41 46 47 48 53 54 55];[50 51 52 53 54 56 57 58 59];[17 18 19 25 26 27 34 35 36];[22 23 24 31 32 33 39 40 41];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 49];[2 7 14 22 30 39 47 55]};
%type 27+ Type 20
% chn = {[1:16 18:22 29];[25:33];[36:39 42:47 49:57];[10 11 17:19 25:28 34:36 42 43];[11:13 18:21 26:29 35:38 43:45];[12:14 19:22 27:30 36:39 44:46];[13:15 20:23 29:32 37:40 45:47];[15 16 22:24 30:33 39:41 47:48];[1:57];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 49];[2 7 14 22 30 39 47 55]};
%Type 27 + all
% chn = {[];[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 49];[2 7 14 22 30 39 47 55]};
%type 28
% chn = {[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};
%type 28+Type 6
% chn = {[10:12 18:20 26:28]; [5:7 12:14 20:22]; [14:16 22:24 30:32]; [20:22 28:30 37:39]; [30:32 39:41 46:48]; [37:39 44:46 51:53]; [26:28 35:37 42:44];[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};
%type 28+ Type 14
% chn = {[1 2 5 6 7 12 13 14 21];[3 4 5 10 11 12 18 19 20];[5 6 7 12 13 14 20 21 22];[7 8 9 14 15 16 22 23 24];[10 11 12 18 19 20 26 27 28];[12 13 14 20 21 22 28 29 30];[14 15 16 22 23 24 30 31 32];[18 19 20 26 27 28 35 36 37];[20 21 22 28 29 30 37 38 39];[22 23 24 30 31 32 39 40 41];[26 27 28 35 36 37 42 43 44];[28 29 30 37 38 39 44 45 46];[30 31 32 39 40 41 46 47 48];[35 36 37 42 43 44 49 50 51];[37 38 39 44 45 46 51 52 53];[39 40 41 46 47 48 53 54 55];[50 51 52 53 54 56 57 58 59];[17 18 19 25 26 27 34 35 36];[22 23 24 31 32 33 39 40 41];[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};
%type 28+ Type 20
% chn = {[1:16 18:22 29];[25:33];[36:39 42:47 49:57];[10 11 17:19 25:28 34:36 42 43];[11:13 18:21 26:29 35:38 43:45];[12:14 19:22 27:30 36:39 44:46];[13:15 20:23 29:32 37:40 45:47];[15 16 22:24 30:33 39:41 47:48];[1:57];[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};
%type 28 + all
 %chn = {[];[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};
%type 27+ type 28
% chn = {[17:24];[25:33];[34:41];[3 11 18 27 35 43 49];[6 13 20 21 29 37 38 45 52];[9 15 23 31 40 47 55];[1 5 12 19 28 36 44 49];[2 7 14 22 30 39 47 55];[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};
%Type 25+Type 28//Window 
chn = {[1:16 18:23 28:30];[36:39 42:59];[10:48];[3:5 10:12 17:20 25:28 34:37 42:44 49:51];[8 9 14:16 21:24 30:33 38:41 46:48 53:55];[1 2 4:8 11:15 19:22 27:31 36:39 43:47 50:54 56:59]};



startEpoch=0.5;
endEpoch=4.8;

order=4;%order of the butterworth filter
%frequency parameters
flow=6; fhigh=16;

clssifier = 'LDA';
featureN= 'log_Var_Win';%log_Var, log_Var_Win, log_Var_Wavedec, katz, katz_Wavedec, higuchi, higuchi_Wavedec, MAV, RMS,  Eng, Ent, fft, katz_Win; ';%
nfold = 5;%folding size

%parameters for time window selection.
%only selected on "log_Var_Win" and "katz_Win"
global winsize winhop; 
winsize=3.6;
winhop=0.2;

cspPair=2;
resvf=[]; restf=[];resv=[]; rest=[]; Valid=[]; Test=[];

fprintf('fbcsp: SE=%1.1f, EE=%1.1f, Ord=%d, L=%d, H=%d, feature=%s,  Classif=%s winsize=%1.1f winhop=%1.1f \n'...
    ,startEpoch,endEpoch, order,flow,fhigh, featureN, clssifier, winsize, winhop);

load BCI_C4D1.mat %BCI_C4D1; %BCI_C4D1_allsub_4s; %BCI_C4D1;%   BCI_C4D1_sub1267_4s; %select the saved version created on data read. 
nbSubjects = length(raw_dataTrain);

for s=1:nbSubjects
    dataTrainS = raw_dataTrain{s};


    %sorting data classwise
     Lb = dataTrainS.y; ind_c1 = find(Lb==1); ind_c2 = find(Lb==2);
     dataTrainS.x =dataTrainS.x(:,:,[ind_c1 ind_c2]);   
     dataTrainS.y =dataTrainS.y([ind_c1 ind_c2]);
     count = 1;
  for cb=1:size(chn,1)
             dataTrain_CB= dataTrainS;

             chn1=chn{[cb]}; 
%              chn_temp=chn(cb,:);
             if (isempty(chn1))
               chn_temp = chn1
               
               FeatS{count}='all channels'
               count=count+1; 
             else
                chn_temp=chn1; %%%%%%%(chn_nonZero,:)
                dataTrain_CB.x = dataTrainS.x(chn_temp,:,:);

                count=count+1; 
             end %channel check
      
     %folding loop
     for fold = 1:nfold
         dataTrain = dataTrain_CB;
         dataTest.y = dataTrain.y(fold:nfold:end);
         dataTest.x = dataTrain.x(:,:,fold:nfold:end);
         dataTest.sf = dataTrain.sf; 
         dataTrain.y(fold:nfold:end)=[]; 
         dataTrain.x(:,:,fold:nfold:end)=[];        
         %for validation set
         si=fold;
         if(fold==nfold) si=1; end
         
         dataValid.y = dataTrain.y(si:(nfold-1):end);
         dataValid.x = dataTrain.x(:,:,si:(nfold-1):end);
         dataValid.sf = dataTrain.sf; 
         dataTrain.y(si:(nfold-1):end)=[]; 
         dataTrain.x(:,:,si:(nfold-1):end)=[];         
%        % disp('Train Test Divided ...'); 



         
        %frequency selection
        low = flow; high=fhigh;
        dataTrain = eegButterFilter(dataTrain, low, high, order);
        dataTest = eegButterFilter(dataTest, low, high, order);
        dataValid = eegButterFilter(dataValid, low, high, order);
                       

            
                %%--------CSP--------------------%% 
            [dataTrain_cb.x, dataTest_cb.x,dataValid_cb.x] = MC_CSP_val(dataTrain,dataTest,dataValid,cspPair);
               %----feature extraction-------
                dataTrain_cb.x = extractFeature(dataTrain_cb.x,featureN); 
                dataTest_cb.x = extractFeature(dataTest_cb.x,featureN);
                dataValid_cb.x = extractFeature(dataValid_cb.x,featureN);
            %----ML Model---------
               
          [resV resT] = my_LDA_val(dataTrain_cb.x,dataTrain.y,...
          dataValid_cb.x,dataValid.y,...
                dataTest_cb.x ,dataTest.y);
          
            resvf(fold)=resV ; restf(fold)=resT; 
%           FeatS{count}=num2str(chn_temp)
% %           pause
%           count=count+1; 
        end %fold loop 
%           fprintf('\n folding no: %d for subject: %d \n',fold ,s)
         resv(cb) = mean(resvf);
         rest(cb) = mean(restf);
     end %channel bank loop
     
     
    Valid(s)= mean(resv);
    Test(s)= mean(rest);
     fprintf('\n Done for subject: %d \n',s);
     fprintf(' Test result:'); disp(mean(resv))
     %fprintf(' Validation result:'); disp(mean(restf))  
  
end%subject loop
fprintf('\n Test result for all subjects:'); disp(Test)
%fprintf('\n Validation result for all subjects:'); disp(Valid) 
fprintf('\n\n Over all Average Test result: %2.2f\n', mean(Test))
%fprintf('\n Over all Avarage Validation result: %2.2f\n', mean(Valid))